@use 'colors' as *;
@use 'css3' as *;
@use 'mixins' as *;
@use 'variables' as *;

@mixin button_radius($corners: rounded) {

  @if ($corners == round) {
    @include border-radius(10em);
  } @else if ($corners == square) {
    @include border-radius(0);
  } @else if ($corners == rounded) {
    @include border-radius($light);
  } @else {
    @include border-radius($corners);
  }
}

@mixin button_spacing() {

  // + a,
  + button,
  + input[type="button"],
  + input[type="submit"],
  + input[type="reset"],
  + .button,
  + .wp-block-button {
    margin-top: calc($standard_spacing / 6);

    &.xx-small {
      // margin-top: #{($standard_spacing / 6) / $xx-small}em;
      @include responsive_ems(margin-top, calc($standard_spacing / 6), regular '/' xx-small);
    }

    &.x-small {
      // margin-top: #{($standard_spacing / 6) / $x-small}em;
      @include responsive_ems(margin-top, calc($standard_spacing / 6), regular '/' x-small);
    }

    &.small {
      // margin-top: #{($standard_spacing / 6) / $small}em;
      @include responsive_ems(margin-top, calc($standard_spacing / 6), regular '/' small);
    }

    &.large {
      // margin-top: #{($standard_spacing / 6) / $large}em;
      @include responsive_ems(margin-top, calc($standard_spacing / 6), regular '/' large);
    }

    &.x-large {
      // margin-top: #{($standard_spacing / 6) / $x-large}em;
      @include responsive_ems(margin-top, calc($standard_spacing / 6), regular '/' x-large);
    }
  }
}

@mixin button_color(
  $background-color: $black,
  $text-color: null,
  $hover-background-color: null,
  $hover-text-color: null,
  $style: solid
) {

  @if ($style == outline) {
    background-color: transparent;
    @include box_shadow(-$light $light 0 $background-color);

    @if ($text-color != null) {
      border-color: $text-color;
      color: $text-color;
    } @else {
      border-color: $background-color;
      color: $background-color;
    }

    &:focus,
    &:hover {

      @if ($hover-background-color != null) {
        background-color: $hover-background-color;
        border-color: $hover-background-color;
      } @else if ($text-color != null){
        background-color: $text-color;
      } @else {
        background-color: $background-color;
      }

      @if ($hover-text-color != null) {
        color: $hover-text-color;
      } @else if ($hover-background-color != null) {
        @include text-contrast($hover-background-color);
        // @if (lightness($hover-background-color) > 50) {
        //   color: $double_black;
        // } @else {
        //   color: $white;
        // }
      } @else if ($text-color != null) {
        @include text-contrast($text-color);
        // @if (lightness($text-color) > 50) {
        //   color: $double_black;
        // } @else {
        //   color: $white;
        // }
      } @else {
        @include text-contrast($background-color);
        // @if (lightness($background-color) > 50) {
        //   color: $double_black;
        // } @else {
        //   color: $white;
        // }
      }
    }
  } @else {
    background-color: $background-color;
    border-color: $background-color;
    border-width: 0;

    @if ($text-color != null) {
      color: $text-color;
    } @else {
      @include text-contrast($background-color);
      // @if (lightness($background-color) > 50) {
      //   color: $double_black;
      // } @else {
      //   color: $white;
      // }
    }

    &:focus,
    &:hover {

      @if ($hover-background-color != null) {
        background-color: $hover-background-color;
        border-color: $hover-background-color;
      } @else if ($text-color != null) {
        background-color: $text-color;
        border-color: $text-color;
      } @else {
        // The following is pulled from the guts of the text-contrast mixin
        // Text-contrast mixin needs to be made more flexible but no time to do that now
        $color-brightness: round((red($background-color) * 299) + (green($background-color) * 587) + (blue($background-color) * 114) / 1000);
        $light-color: round((red($white) * 299) + (green($white) * 587) + (blue($white) * 114) / 1000);
        @if abs($color-brightness) < ($light-color / 2){
          background-color: $white;
          border-color: $white;
        } @else {
          background-color: $double_black;
          border-color: $double_black;
        }
        // @if (lightness($background-color) > 50) {
        //   background-color: $double_black;
        //   border-color: $double_black;
        // } @else {
        //   background-color: $white;
        //   border-color: $white;
        // }
      }

      @if ($hover-text-color != null) {
        color: $hover-text-color;
      } @else if ($hover-background-color != null) {
        @include text-contrast($hover-background-color);
        // @if (lightness($hover-background-color) > 50) {
        //   color: $double_black;
        // } @else {
        //   color: $white;
        // }
      } @else {
        color: $background-color;
      }
    }
  }
}


@mixin button_style(
  $style: solid,
  $background-color: $black,
  $text-color: null,
  $hover-background-color: null,
  $hover-text-color: null
) {

  @if ($style == outline) {
    border-width: $light;
    @include box_shadow(-$light $light 0 $background-color); // keep this above button_color mixin.
    @include button_color($background-color, $text-color, $hover-background-color, $hover-text-color, outline);

  } @else {
    @include button_color($background-color, $text-color, $hover-background-color, $hover-text-color, solid);
    @include box_shadow(none);
    // border-width: 0;

  }
}

@mixin button_hover(
  $hover_background: $brody_wall,
  $hover_color: $black,
  $active_background: $sparta,
  $active_color: $white,
  $active_hover_background: $sparta,
  $active_hover_color: $white,
  $active_active_background: $logo_blue,
  $active_active_color: $white
) {

  &:focus,
  &:hover {
    border-color: $hover_background;
    background-color: $hover_background;
    color: $hover_color;
  }

  &:active {
    border-color: $active_background;
    background-color: $active_background;
    color: $active_color;
  }

  &.active {

    &:focus,
    &:hover {
      border-color: $active_hover_background;
      background-color: $active_hover_background;
      color: $active_hover_color;
    }

    &:active {
      border-color: $active_active_background;
      background-color: $active_active_background;
      color: $active_active_color;
    }
  }

  &.button-accent {

    &:active,
    &:focus,
    &:hover {
      border-color: $hover_background;
      background-color: $hover_background;
      color: $hover_color;
    }
  }
}

@mixin button_old($size: 'medium', $color: $black, $style: 'default') {

  @if $size == 'medium' {
    @include font_size(font-size, regular);
    padding: ($standard_spacing * 0.125) ($standard_spacing * 0.5);

  } @else if $size == 'small' {
    @include responsive_ems(border-width, $light, regular '/' small);
    @include font_size(font-size, small);
    padding: ($standard_spacing * 0.125) ($standard_spacing * 0.5);


  } @else if $size == 'large' {
    @include responsive_ems(border-width, $light, regular '/' large);
    @include font_size(font-size, large);
    padding: ($standard_spacing * 0.125) ($standard_spacing * 0.5);
  }
}

@mixin button_size($size: medium) {

  @if ($size == xxx-small) {
    border-width: $hairline;
    // @include responsive_ems(border-width, $thin, regular '/' xxx-small);
    @include font_size(font-size, xxx-small, regular, gentona, !important);
    font-weight: 700; // Changed 03-10
    letter-spacing: 0.0875em;
    // padding: #{($standard_spacing / 18) / $xx-small}em #{($standard_spacing / 8) / $xx-small}em;
    @include responsive_ems(padding, calc($standard_spacing / 12) calc($standard_spacing / 5), regular '/' xxx-small);
  }

  @else if ($size == xx-small) {
    @include responsive_ems(border-width, $thin, regular '/' xx-small);
    @include font_size(font-size, xx-small, regular, gentona, !important);
    font-weight: 700; // Changed 03-10
    letter-spacing: 0.075em;
    @include responsive_ems(padding, calc($standard_spacing / 10) calc($standard_spacing / 4.5), regular '/' xx-small);
  }

  @else if ($size == x-small) {
    @include responsive_ems(border-width, $thin, regular '/' x-small);
    @include font_size(font-size, x-small, regular, gentona, !important);
    letter-spacing: 0.0625em;
    font-weight: 700; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 8) calc($standard_spacing / 4), regular '/' x-small);
  }

  @else if ($size == small) {
    @include responsive_ems(border-width, $thin, regular '/' small);
    @include font_size(font-size, small, regular, gentona, !important);
    letter-spacing: 0.05em;
    font-weight: 700; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 6) calc($standard_spacing / 3), regular '/' small);
  }

  @else if ($size == medium) {
    @include responsive_ems(border-width, $medium, regular '/' regular);
    @include font_size(font-size, regular, regular, gentona, !important);
    font-weight: 700; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 4) calc($standard_spacing / 2), regular '/' regular);
  }

  @else if ($size == large) {
    @include responsive_ems(border-width, $semi-bold, regular '/' large);
    @include font_size(font-size, large, regular, gentona, !important);
    font-weight: 900; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 3.5) calc($standard_spacing * (2 / 3)), regular '/' large);
    width: 100%;
  }

  @else if ($size == x-large) {
    @include responsive_ems(border-width, $semi-bold, regular '/' x-large);
    @include font_size(font-size, x-large, regular, gentona, !important);
    font-weight: 900; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 3) calc($standard_spacing * (5 / 6)), regular '/' x-large);
    width: 100%;
  }

  @else if ($size == xx-large) {
    @include responsive_ems(border-width, $semi-bold, regular '/' xx-large);
    @include font_size(font-size, xx-large, regular, gentona, !important);
    font-weight: 900; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 3) $standard_spacing, regular '/' xx-large);
    width: 100%;
  }

  @else if ($size == xxx-large) {
    @include responsive_ems(border-width, $semi-bold, regular '/' xxx-large);
    @include font_size(font-size, xxx-large, regular, gentona, !important);
    font-weight: 900; // Changed 03-10
    @include responsive_ems(padding, calc($standard_spacing / 3) calc($standard_spacing * (4 / 3)), regular '/' xxx-large);
    width: 100%;
  }

  @else {
    border-width: $light;
    @include font_size(font-size, regular, regular, gentona, !important);
    font-weight: 700; // Changed 03-10
    padding: calc($standard_spacing / 4) calc($standard_spacing / 2);
  }
}

@mixin button_defaults($color: $black) {
  // align-items: center;
  // background-color: transparent;
  border: solid $color $light;
  @include box-shadow(none);
  // color: $color;
  cursor: pointer;
  display: inline-block;
  // display: inline-flex;
  font-family: $sans;
  // gap: 0.5em;
  // justify-content: center;
  letter-spacing: 0.05em;
  // line-height: 0.75em; // should set the line height to match the caps character height for each font
  line-height: 1.1;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;

  + * {
    margin-top: calc($standard_spacing / 3);
  }

  @include button_spacing();
}


@mixin button($size: medium, $corners: rounded, $color: $black, $style: default) {
  @include button_defaults($color);
  @include button_radius($corners);
  @include button_size($size);
  @include button_style($style, $color);
}
