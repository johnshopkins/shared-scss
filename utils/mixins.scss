@use 'breakpoints' as *;
@use 'colors' as *;
@use 'variables' as *;

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number

// This was removed because it no longer worked after switching to dart/sass

// @function strip-unit($number) {
//   @if type-of($number) == 'number' and not unitless($number) {
//     @return calc($number / (($number * 0) + 1));
//   }
//
//   @return $number;
// }

@mixin force() {

  &:after {
    visibility: hidden;
    display: block;
    content: "";
    clear: both;
    height: 0;
  }
}

/**
* Margin / Padding destruction
*
*
*
*/

@mixin no-margin() {
  margin: 0;
  margin-top: 0;
  margin-right : 0;
  margin-bottom: 0;
  margin-left: 0;
}

@mixin no-padding() {
  padding: 0;
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}

@mixin headline_bar($text-color: inherit, $bar-color: $jay) {
  font-size: $x-small;
  font-weight: 700; // Changed 03-10
  text-transform: uppercase;
  color: $text-color;
  white-space: nowrap;
  overflow: hidden;

  &:after {
    width: 100%;
    height: #{calc($bold / $x-small)}em;
    margin-left: 0.33em;
    background-color: $bar-color;
    display: inline-block;
    content: '';
  }

  + *,
  + .teaser {
    margin-top: 0.5rem !important;
  }

  + .wp-block-image {

    &.size-thumbnail {

      &.alignleft,
      &.alignright {

        + * {
          margin-top: 0.5rem !important;
        }
      }
    }
  }
}



/**
* Long Shadows
*
* http://codepen.io/awesomephant/pen/mAxHz
*
*/

// How to use
// .my-thing {
//   @include long-shadow($type: text, $color: indigo, $length: 50, $fadeout: false, $skew: true, $direction: right);
// }

@mixin long-shadow($type, $color, $length, $fadeout: true, $fade-start: 1, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text {
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
  }
  @if $fadeout == true {
    $shadow: '';
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - calc($i / $length)) * $fade-start)) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - calc($i / $length)) * $fade-start)) + ',';
        }
      }
      @if ($type == box) and $skew == true {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - calc($i / $length)) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - calc($i / $length)) + ',';
        }
      }
    }
  }
  @if $fadeout == false {
    @if $skew == true and ( $type == box ){
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
    }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
  $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}

// Map deep get
// https://css-tricks.com/snippets/sass/deep-getset-maps/
// @author Kitty Giraudel
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@mixin font_size($attr: font-size, $target_size: 'regular', $context_size: 'regular', $font-ratio: 'gentona', $flag: null) {

  @if ($font-ratio == gentona) {
    $font-ratio: $gentona-ratio;
  } @else if ($font-ratio == quadon) {
    $font-ratio: $quadon-ratio;
  } @else if ($font-ratio == arnhem) {
    $font-ratio: $arnhem-ratio;
  } @else if ($font-ratio == titling) {
    $font-ratio: $titling-ratio;
  }

  #{$attr}:
  calc(
    round(
      (
        calc(
          map-deep-get($font_sizes, $target_size, 'hand') / 1em
        )
        *
        calc(
          $default_font_size_px / 1px
        )
      )
      * $font-ratio
    )
    /
    (
      calc(
        map-deep-get($font_sizes, $context_size, 'hand') / 1em
      )
      *
      calc(
        $default_font_size_px / 1px
      )
    )
  )
  * 1em $flag;

  @include breakpoint_lap_width() {
    #{$attr}:
    calc(
      round(
        (
          calc(
            map-deep-get($font_sizes, $target_size, 'lap') / 1em
          )
          *
          calc(
            $breakpoint_lap_font_size_px / 1px
          )
        )
        * $font-ratio
      )
      /
      (
        calc(
          map-deep-get($font_sizes, $context_size, 'lap') / 1em
        )
        *
        calc(
          $breakpoint_lap_font_size_px / 1px
        )
      )
    )
    * 1em $flag;
  }

  @include breakpoint_desk_width() {
    #{$attr}:
    calc(
      round(
        (
          calc(
            map-deep-get($font_sizes, $target_size, 'desk') / 1em
          )
          *
          calc(
            $breakpoint_desk_font_size_px / 1px
          )
        )
        * $font-ratio
      )
      /
      (
        calc(
          map-deep-get($font_sizes, $context_size, 'desk') / 1em
        )
        *
        calc(
          $breakpoint_desk_font_size_px / 1px
        )
      )
    )
    * 1em $flag;
  }

  @include breakpoint_wall_width() {
    #{$attr}:
    calc(
      round(
        (
          calc(
            map-deep-get($font_sizes, $target_size, 'wall') / 1em
          )
          *
          calc(
            $breakpoint_lap_font_size_px / 1px
          )
        )
        * $font-ratio
      )
      /
      (
        calc(
          map-deep-get($font_sizes, $context_size, 'lap') / 1em
        )
        *
        calc(
          $breakpoint_lap_font_size_px / 1px
        )
      )
    )
    * 1em $flag;
  }

  @include breakpoint_jumbotron_width() {
    #{$attr}:
    calc(
      round(
        (
          calc(
            map-deep-get($font_sizes, $target_size, 'jumbotron') / 1em
          )
          *
          calc(
            $breakpoint_lap_font_size_px / 1px
          )
        )
        * $font-ratio
      )
      /
      (
        calc(
          map-deep-get($font_sizes, $context_size, 'lap') / 1em
        )
        *
        calc(
          $breakpoint_lap_font_size_px / 1px
        )
      )
    )
    * 1em $flag;
  }
}

@function responsive_em($sizes, $ratio: regular '/' regular, $screen_size: hand) {
  // Accepts $ratio as 'large / small' or 'small * large'
  // first = target, second = function, last = context
  $target: nth($ratio, 1);
  $function: nth($ratio, 2);
  $context: nth($ratio, -1);

  $new_sizes: null;

  @if ($function == '/') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (calc(nth($sizes, $i) / 1em) * calc(calc(map-deep-get($font_sizes, $target, $screen_size) / 1em) / calc(map-deep-get($font_sizes, $context, $screen_size) / 1em))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '*') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (calc(nth($sizes, $i) / 1em) * (calc(map-deep-get($font_sizes, $target, $screen_size) / 1em) * calc(map-deep-get($font_sizes, $context, $screen_size) / 1em))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '+') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (calc(nth($sizes, $i) / 1em) * (calc(map-deep-get($font_sizes, $target, $screen_size) / 1em) + calc(map-deep-get($font_sizes, $context, $screen_size) / 1em))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '-') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (calc(nth($sizes, $i) / 1em) * (calc(map-deep-get($font_sizes, $target, $screen_size) / 1em) - calc(map-deep-get($font_sizes, $context, $screen_size) / 1em))) * 1em);
    }

    @return $new_sizes;
  }
}

@mixin responsive_ems($attr, $sizes, $ratio: regular '/' regular) {
  $screen_sizes: hand lap desk wall jumbotron;

  $breakpoint_size: null;

  @for $i from 1 through length($screen_sizes) {
   @if nth($screen_sizes, $i) == hand {
     #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));

   } @else if nth($screen_sizes, $i) == lap {
     @include breakpoint_lap_width() {
       #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
     }

   } @else if nth($screen_sizes, $i) == desk {
     @include breakpoint_desk_width() {
       #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
     }

   } @else if nth($screen_sizes, $i) == wall {
     @include breakpoint_wall_width() {
       #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
     }

   } @else if nth($screen_sizes, $i) == jumbotron {
     @include breakpoint_jumbotron_width() {
       #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
     }
   }
  }
}

// https://jonnykates.medium.com/automating-colour-contrast-ratios-with-sass-e201f3b52797
@mixin text-contrast($n, $property: color, $flag: null) {
  $color-brightness: round(calc(((red($n) * 299) + (green($n) * 587) + (blue($n) * 114)) / 1000));
  $light-color: round(calc(((red($white) * 299) + (green($white) * 587) + (blue($white) * 114)) / 1000));
  @if abs($color-brightness) < calc($light-color / 2){
    #{$property}: $white $flag;
  } @else {
    #{$property}: $double_black $flag;
  }
}
