@use 'breakpoints' as *;
@use 'colors' as *;
@use 'variables' as *;

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@use "sass:math";

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return calc($number / ($number * (0 + 1)));
  }

  @return $number;
}

@mixin force() {

  &:after {
    visibility: hidden;
    display: block;
    content: "";
    clear: both;
    height: 0;
  }
}

/**
* Margin / Padding destruction
*
*
*
*/

@mixin no-margin() {
  margin: 0;
  margin-top: 0;
  margin-right : 0;
  margin-bottom: 0;
  margin-left: 0;
}

@mixin no-padding() {
  padding: 0;
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}

@mixin headline_bar($text-color: inherit, $bar-color: $jay) {
  font-size: $x-small;
  font-weight: 600;
  text-transform: uppercase;
  color: $text-color;
  white-space: nowrap;
  overflow: hidden;

  &:after {
    width: 100%;
    height: #{math.div($bold, $x-small)}em;
    margin-left: 0.33em;
    background-color: $bar-color;
    display: inline-block;
    content: '';
  }

  + *,
  + .teaser {
    margin-top: 0.5em !important;
  }
}



/**
* Long Shadows
*
* http://codepen.io/awesomephant/pen/mAxHz
*
*/

// How to use
// .my-thing {
//   @include long-shadow($type: text, $color: indigo, $length: 50, $fadeout: false, $skew: true, $direction: right);
// }

@mixin long-shadow($type, $color, $length, $fadeout: true, $fade-start: 1, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text {
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
  }
  @if $fadeout == true {
    $shadow: '';
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - math.div($i, $length)) * $fade-start)) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - math.div($i, $length)) * $fade-start)) + ',';
        }
      }
      @if ($type == box) and $skew == true {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - math.div($i, $length)) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - math.div($i, $length)) + ',';
        }
      }
    }
  }
  @if $fadeout == false {
    @if $skew == true and ( $type == box ){
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
    }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
  $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}

// Map deep get
// https://css-tricks.com/snippets/sass/deep-getset-maps/
// @author Kitty Giraudel
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@mixin font_size($attr: font-size, $target_size: 'regular', $context_size: 'regular', $font-ratio: 'gentona') {

  @if ($font-ratio == gentona) {
    $font-ratio: $gentona-ratio;
  } @else if ($font-ratio == quadon) {
    $font-ratio: $quadon-ratio;
  } @else if ($font-ratio == arnhem) {
    $font-ratio: $arnhem-ratio;
  } @else if ($font-ratio == titling) {
    $font-ratio: $titling-ratio;
  }

  // #{$attr}: map-deep-get($font_sizes, $target_size, 'hand');

  #{$attr}: strip-unit(calc(round((strip-unit(map-deep-get($font_sizes, $target_size, 'hand')) * $breakpoint_lap_font_size_px) * $font-ratio) / strip-unit(map-deep-get($font_sizes, $context_size, 'hand')) * $breakpoint_lap_font_size_px))#{em};

  @include breakpoint_lap_width() {
    #{$attr}: strip-unit(calc(round((strip-unit(map-deep-get($font_sizes, $target_size, 'lap')) * $breakpoint_lap_font_size_px) * $font-ratio) / strip-unit(map-deep-get($font_sizes, $context_size, 'lap')) * $breakpoint_lap_font_size_px))#{em};
  }

  @include breakpoint_desk_width() {
    #{$attr}: strip-unit(calc(round((strip-unit(map-deep-get($font_sizes, $target_size, 'desk')) * $breakpoint_lap_font_size_px) * $font-ratio) / strip-unit(map-deep-get($font_sizes, $context_size, 'desk')) * $breakpoint_lap_font_size_px))#{em};
  }

  @include breakpoint_wall_width() {
    #{$attr}: strip-unit(calc(round((strip-unit(map-deep-get($font_sizes, $target_size, 'wall')) * $breakpoint_lap_font_size_px) * $font-ratio) / strip-unit(map-deep-get($font_sizes, $context_size, 'wall')) * $breakpoint_lap_font_size_px))#{em};
  }

  @include breakpoint_jumbotron_width() {
    #{$attr}: strip-unit(calc(round((strip-unit(map-deep-get($font_sizes, $target_size, 'jumbotron')) * $breakpoint_lap_font_size_px) * $font-ratio) / strip-unit(map-deep-get($font_sizes, $context_size, 'jumbotron')) * $breakpoint_lap_font_size_px))#{em};
  }
}

@function responsive_em($sizes, $ratio: regular '/' regular, $screen_size: hand) {
  // Accepts $ratio as 'large / small' or 'small * large'
  // first = target, second = function, last = context
  $target: nth($ratio, 1);
  $function: nth($ratio, 2);
  $context: nth($ratio, -1);

  $new_sizes: null;

  @if ($function == '/') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * calc(strip-unit(map-deep-get($font_sizes, $target, $screen_size)) / strip-unit(map-deep-get($font_sizes, $context, $screen_size)))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '*') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-deep-get($font_sizes, $target, $screen_size)) * strip-unit(map-deep-get($font_sizes, $context, $screen_size)))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '+') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-deep-get($font_sizes, $target, $screen_size)) + strip-unit(map-deep-get($font_sizes, $context, $screen_size)))) * 1em);
    }

    @return $new_sizes;

  } @else if ($function == '-') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-deep-get($font_sizes, $target, $screen_size)) - strip-unit(map-deep-get($font_sizes, $context, $screen_size)))) * 1em);
    }

    @return $new_sizes;
  }
}

@mixin responsive_ems($attr, $sizes, $ratio: regular '/' regular) {
  $screen_sizes: hand lap desk wall jumbotron;

  $breakpoint_size: null;

  @for $i from 1 through length($screen_sizes) {
    @if nth($screen_sizes, $i) == hand {
      #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));

    } @else if nth($screen_sizes, $i) == lap {
      @include breakpoint_lap_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @else if nth($screen_sizes, $i) == desk {
      @include breakpoint_desk_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @else if nth($screen_sizes, $i) == wall {
      @include breakpoint_wall_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @else if nth($screen_sizes, $i) == jumbotron {
      @include breakpoint_jumbotron_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }
    }
  }
}
