/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/**
* Margin / Padding destruction
*
*
*
*/

@mixin no-margin() {
  margin: 0;
  margin-top: 0;
  margin-right : 0;
  margin-bottom: 0;
  margin-left: 0;
}

@mixin no-padding() {
  padding: 0;
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}


/**
* Long Shadows
*
* http://codepen.io/awesomephant/pen/mAxHz
*
*/

// How to use
// .my-thing {
//   @include long-shadow($type: text, $color: indigo, $length: 50, $fadeout: false, $skew: true, $direction: right);
// }

@mixin long-shadow($type, $color, $length, $fadeout: true, $fade-start: 1, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text {
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
  }
  @if $fadeout == true {
    $shadow: '';
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - ($i / $length)) * $fade-start)) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + rgba($color, ((1 - ($i / $length)) * $fade-start)) + ',';
        }
      }
      @if ($type == box) and $skew == true {
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
    }
  }
  @if $fadeout == false {
    @if $skew == true and ( $type == box ){
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
    }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
  $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}


@mixin font_size($attr: font-size, $target_size: regular, $context_size: regular) {

  #{$attr}: (map-get($font_sizes, $target_size#{_hand}) / map-get($font_sizes, $context_size#{_hand}))#{em};

  @include breakpoint_lap_width() {
    #{$attr}: (map-get($font_sizes, $target_size#{_lap}) / map-get($font_sizes, $context_size#{_lap}))#{em};
  }

  @include breakpoint_desk_width() {
    #{$attr}: (map-get($font_sizes, $target_size#{_desk}) / map-get($font_sizes, $context_size#{_desk}))#{em};
  }

  @include breakpoint_wall_width() {
    #{$attr}: (map-get($font_sizes, $target_size#{_wall}) / map-get($font_sizes, $context_size#{_wall}))#{em};
  }

  @include breakpoint_jumbotron_width() {
    #{$attr}: (map-get($font_sizes, $target_size#{_jumbotron}) / map-get($font_sizes, $context_size#{_jumbotron}))#{em};
  }
}

@function responsive_em($sizes, $ratio: regular '/' regular, $screen_size: hand) {
  // Accepts $ratio as 'large / small' or 'small * large'
  // first = target, second = function, last = context
  $target: nth($ratio, 1);
  $function: nth($ratio, 2);
  $context: nth($ratio, -1);

  $new_sizes: null;

  @if ($function == '/') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-get($font_sizes, $target#{_#{$screen_size}})) / strip-unit(map-get($font_sizes, $context#{_#{$screen_size}})))) * 1em);
    }

    @return $new_sizes;

  } @elseif ($function == '*') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-get($font_sizes, $target#{_#{$screen_size}})) * strip-unit(map-get($font_sizes, $context#{_#{$screen_size}})))) * 1em);
    }

    @return $new_sizes;

  } @elseif ($function == '+') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-get($font_sizes, $target#{_#{$screen_size}})) + strip-unit(map-get($font_sizes, $context#{_#{$screen_size}})))) * 1em);
    }

    @return $new_sizes;

  } @elseif ($function == '-') {
    @for $i from 1 through length($sizes) {
      $new_sizes: append($new_sizes, (strip-unit(nth($sizes, $i)) * (strip-unit(map-get($font_sizes, $target#{_#{$screen_size}})) - strip-unit(map-get($font_sizes, $context#{_#{$screen_size}})))) * 1em);
    }

    @return $new_sizes;
  }
}

@mixin responsive_ems($attr, $sizes, $ratio: regular '/' regular) {
  $screen_sizes: hand lap desk wall jumbotron;

  $breakpoint_size: null;

  @for $i from 1 through length($screen_sizes) {
    @if nth($screen_sizes, $i) == hand {
      #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));

    } @elseif nth($screen_sizes, $i) == lap {
      @include breakpoint_lap_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @elseif nth($screen_sizes, $i) == desk {
      @include breakpoint_desk_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @elseif nth($screen_sizes, $i) == wall {
      @include breakpoint_wall_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }

    } @elseif nth($screen_sizes, $i) == jumbotron {
      @include breakpoint_jumbotron_width() {
        #{$attr}: responsive_em($sizes, $ratio, nth($screen_sizes, $i));
      }
    }
  }
}



// Buttons

@mixin button_spacing() {

  + * {
    margin-top: ($standard_spacing / 3);
  }

  + a,
  + button,
  + input[type="button"],
  + input[type="submit"],
  + input[type="reset"],
  + .button,
  + .wp-block-button {
    margin-top: $standard_spacing / 6;

    &.xx-small {
      margin-top: #{($standard_spacing / 6) / $xx-small}em;
    }

    &.x-small {
      margin-top: #{($standard_spacing / 6) / $x-small}em;
    }

    &.small {
      margin-top: #{($standard_spacing / 6) / $small}em;
    }

    &.large {
      margin-top: #{($standard_spacing / 6) / $large}em;
    }

    &.x-large {
      margin-top: #{($standard_spacing / 6) / $x-large}em;
    }
  }
}

@mixin button_hover($color_scheme: hub) {

  @if ($color_scheme == at-work) {
    &:hover,
    &:focus {
      border-color: $at_work_accent;
      background-color: $at_work_accent;
      color: $white;
    }

    &:active {
      border-color: $at_work_accent_dark;
      background-color: $at_work_accent_dark;
      color: $white;
    }

    &.active {

      &:hover,
      &:focus {
        border-color: $at_work_accent_dark;
        background-color: $at_work_accent_dark;
        color: $white;
      }

      &:active {
        border-color: $at_work_accent_darkest;
        background-color: $at_work_accent_darkest;
      }
    }

    &.button-accent {

      &:hover,
      &:focus,
      &:active {
        border-color: $at_work_accent_dark;
        background-color: $at_work_accent_dark;
      }
    }
  }

  @else {
    &:hover,
    &:focus {
      border-color: $hub_blue_light;
      background-color: $hub_blue_light;
      color: $black;
    }

    &:active {
      border-color: $hub_blue;
      background-color: $hub_blue;
      color: $white;
    }

    &.active {

      &:hover,
      &:focus {
        border-color: $hub_blue;
        background-color: $hub_blue;
        color: $white;
      }

      &:active {
        border-color: $hub_blue_dark;
        background-color: $hub_blue_dark;
      }
    }

    &.button-accent {

      &:hover,
      &:focus,
      &:active {
        border-color: $hub_blue_light;
        background-color: $hub_blue_light;
      }
    }
  }
}

@mixin button_old($size: 'medium', $color: $sparta, $style: 'default') {

  @if $size == 'medium' {
    @include font_size(font-size, regular);
    padding: $standard_spacing / 8;

  } @else if $size == 'small' {
    @include responsive_ems(border-width, $light, regular '/' small);
    @include font_size(font-size, small);
    padding: $standard_spacing / 8;


  } @else if $size == 'large' {
    @include responsive_ems(border-width, $light, regular '/' large);
    @include font_size(font-size, large);
    padding: $standard_spacing / 8;
  }
}


@mixin button($size: medium, $corners: normal, $color: $sparta, $style: default) {
  background-color: transparent;
  border: solid $color $light;
  @if ($corners == round) {
    @include border-radius(10em);
  } @else if ($corners == square) {
    @include border-radius(0);
  } @else {
    @include border-radius($light);
  }
  @include box-shadow(none);
  color: $color;
  cursor: pointer;
  display: inline-block;
  font-family: $gentona;
  line-height: 0.75em; // should set the line height to match the caps character height for each font
  // line-height: 1em;
  text-align: center;
  text-transform: uppercase;
  @include button_spacing();

  @if ($size == xx-small) {
    // border-width: #{$thin / $xx-small}em;
    @include responsive_ems(border-width, $thin, regular '/' xx-small);
    @include font_size(font-size, xx-small);
    font-weight: 400;
    // padding: #{($standard_spacing / 18) / $xx-small}em #{($standard_spacing / 8) / $xx-small}em;
    @include responsive_ems(padding, ($standard_spacing / 8), regular '/' xx-small);
  }

  @else if ($size == x-small) {
    // border-width: #{$thin / $x-small}em;
    @include responsive_ems(border-width, $thin, regular '/' x-small);
    @include font_size(font-size, x-small);
    font-weight: 400;
    // padding: #{($standard_spacing / 12) / $x-small}em #{($standard_spacing / 8) / $x-small}em;
    @include responsive_ems(padding, ($standard_spacing / 8), regular '/' x-small);
  }

  @else if ($size == small) {
    // border-width: $light;
    @include responsive_ems(border-width, $light, regular '/' small);
    @include font_size(font-size, small);
    font-weight: 600;
    // padding: #{($standard_spacing / 8) / $small}em #{($standard_spacing / 6) / $small}em;
    @include responsive_ems(padding, ($standard_spacing / 6), regular '/' small);
  }

  @else if ($size == large) {
    // border-width: #{$medium / $large}em;
    @include responsive_ems(border-width, $medium, regular '/' large);
    @include font_size(font-size, large);
    font-weight: 600;
    // padding: #{($standard_spacing / 5) / $large}em #{($standard_spacing / 4) / $large}em;
    @include responsive_ems(padding, ($standard_spacing / 4), regular '/' large);
  }

  @else if ($size == x-large) {
    // border-width: #{$semi-bold / $x-large}em;
    @include responsive_ems(border-width, $semi-bold, regular '/' x-large);
    @include font_size(font-size, x-large);
    font-weight: 600;
    // padding: #{($standard_spacing / 4) / $x-large}em #{($standard_spacing / 3) / $x-large}em;
    @include responsive_ems(padding, ($standard_spacing / 3), regular '/' x-large);
    width: 100%;
  }

  @else {
    border-width: $light;
    font-size: $regular;
    font-weight: 600;
    padding: ($standard_spacing / 5);
  }

  @if $style == 'solid' {
    background-color: $color;
    color: $white;

    &:hover {
      background-color: darken($color, 10%);
      border-color: darken($color, 10%);
    }
  } @else {
    background-color: transparent;
    color: $color;

    &:hover {
      background-color: $color;
      color: $white;
    }
  }
}
