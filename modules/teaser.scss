@use '../utils/main' as *;

:root {
  @include teaser_color(default);
  // Determines stacked or aside layout
  --teaser-direction: row;

  // Spacing between .thumbnail and .text.
  // --teaser-column-gap is set in teaser_gutter() mixin
  --teaser-column-gap: 1rem;
  --teaser-row-gap: 1rem;

  // Allows removal of gap display from teaser_gap() mixin
  // without knowing the actual value of the gap.
  // These are set in teaser_bias() mixin.
  --teaser-column-gap-active: 1;
  --teaser-row-gap-active: 1;

  // Used to correctly size .thumbnail and .text based on which
  // should occupy the additional column gutter space
  // --teaser-aside-bias-offset-value is set in the teaser_gutter() mixin
  --teaser-aside-bias-offset-value: 0px;
  --teaser-aside-bias-offset-active: 0;
  --teaser-aside-bias-offset: calc(var(--teaser-aside-bias-offset-value) * var(--teaser-aside-bias-offset-active));

  // Sets the width of .thumbnail in the teaser_ratio() mixin
  --teaser-aside-image-width: 30%;
  --teaser-stacked-image-width: auto;

  // Sets the width of .text in the teaser_ratio() mixin
  --teaser-aside-text-width: calc(70% - var(--teaser-column-gap) - var(--teaser-aside-bias-offset));
  --teaser-stacked-text-width: 100%;

  // These are what are applied to the flex-basis or width properties of 
  // .thumbnail and .text and are set and applied using the 
  // --teaser-aside/stacked-image/text-bias variables in the 
  // teaser_orientation() mixin
  --teaser-image-width: auto;
  --teaser-text-width: auto;

  // Used in card style teasers to overlap .thumbnail and .text
  --teaser-aside-text-overlap-value: 0px;
  --teaser-stacked-text-overlap-value: 0px;
  --teaser-aside-text-overlap-active: 0;
  --teaser-stacked-text-overlap-active: 0;

  // Sets the shape of .thumbnail (square, landscape, portrait, etc.)
  --teaser-image-aspect-ratio: auto;

  --teaser-aside-image-align: flex-start;
  --teaser-stacked-image-align: stretch;
  --teaser-aside-text-align: stretch;
  --teaser-stacked-text-align: center;
  --teaser-image-align: auto;
  --teaser-text-align: auto;
  --teaser-aside-text-justify: flex-start;
  --teaser-stacked-text-justify: flex-start;
  --teaser-text-justify: auto;

  // Needs a unit for some reason
  --teaser-vertical-padding: 0px;
  --teaser-horizontal-padding: 0px;
  --teaser-text-padding: 0px;

  // Z-indexes for overlapping .thumbnail and .image
  --teaser-aside-image-z-index: #{$stack-normal};
  --teaser-aside-text-z-index: #{$stack-normal};
  --teaser-stacked-image-z-index: #{$stack-normal};
  --teaser-stacked-text-z-index: #{$stack-normal};
  --teaser-image-z-index: #{$stack-normal};
  --teaser-text-z-index: #{$stack-normal};

  // Set in the teaser_shadow() mixin, 
  // applied in the teaser_style() mixin
  --teaser-box-shadow: none;
}

.teaser {
  @include teaser(
    $orientation: aside,
    $ratio: 7 of 10,
    $gutter: full,
    $bias: text,
    $image: landscape,
    $style: padded
  );
  @include teaser_medium();
  align-content: flex-start;
  display: flex;
  flex-direction: var(--teaser-direction);
  // flex-wrap: wrap;
  // column-gap: var(--teaser-column-gap);
  // row-gap: vart(--teaser-row-gap);
  gap: calc(var(--teaser-row-gap) * var(--teaser-row-gap-active)) calc(var(--teaser-column-gap) * var(--teaser-column-gap-active));
  padding: var(--teaser-vertical-padding) var(--teaser-horizontal-padding);
  position: relative;
  width: 100%;
  z-index: $stack_normal;

  .caption {
    display: none !important;
  }

  .thumbnail {
    align-self: var(--teaser-image-align);
    aspect-ratio: var(--teaser-image-aspect-ratio);
    flex-grow: 1;
    margin-bottom: calc(((var(--teaser-stacked-text-overlap-value) * var(--teaser-stacked-text-overlap-active)) * -1) + (var(--teaser-aside-text-overlap-value) * var(--teaser-aside-text-overlap-active)));
    margin-right: calc((var(--teaser-aside-text-overlap-value) * var(--teaser-aside-text-overlap-active)) * -1);
    margin-top: calc(var(--teaser-aside-text-overlap-value) * var(--teaser-aside-text-overlap-active));
    position: relative;
    z-index: var(--teaser-image-z-index);

    a {
      border: none;
      box-shadow: none !important;
      cursor: pointer;
      position: relative;
      z-index: $stack_normal;

      .image {
        overflow: hidden;
        position: relative;
        z-index: $stack_normal;

        &:before {
          width: 100%;
          height: 100%;
          position: absolute;
          top: 0;
          left: 0;
          z-index: $stack_positioned;
          background-color: var(--teaser-image-hover-color);
          content: ' ';
          display: block;
          @include transform(translateZ(0) scale(1.1, 1.1));
          @include opacity(0);
          @include transition(opacity $sprint ease-in-out);
          @include backface-visibility(hidden);
        }
      }

      &:not(:has(.image)) {
        background-color: var(--teaser-image-hover-color) !important;
        overflow: hidden;

        img {
          height: 100% !important;
          object-fit: cover !important;
          max-width: 100% !important;
          transition: opacity $sprint ease-in-out, transform $sprint ease-in-out !important;
        }

        &:focus,
        &:hover {

          img {
            opacity: calc(2 / 3) !important;
          }
        }
      }

      &,
      img {
        display: block;
      }

      img {
        aspect-ratio: var(--teaser-image-aspect-ratio);
        @include backface-visibility(hidden);
        height: auto;
        object-fit: cover;
        margin: 0;
        max-width: none;
        @include transform(scale(1, 1));
        @include transition(transform);
        @include transition-duration($sprint);
        @include transition-timing-function(ease-in-out);
        width: 100%;
      }

      > .column {
        margin-right: 0;
        width: 100%;
      }
    }
  }

  .image-portrait,
  .image-square,
  .image-landscape {
    padding: 0;
  }

  .text {
    align-content: flex-start;
    align-self: var(--teaser-text-align);
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    height: auto;
    justify-content: var(--teaser-text-justify);
    padding: var(--teaser-text-padding);
    position: relative;
    z-index: var(--teaser-text-z-index);

    .accent-element {
      display: flex;
      flex-direction: column;
      left: 0;
      position: static;
      right: 0;
      top: 0;
      @include transform(none);
    }

    h2,
    h5 {
      color: var(--teaser-headline-color);

      a {
        background-color: transparent;
        border: none;
        @include box-shadow(none);
        text-decoration: none;
      }

      + .media-promo,
      + .meta,
      + .publish-date,
      + .summary {
        margin-top: 0;
      }
    }

    .kicker,
    .publish-date,
    .media-promo,
    .meta,
    .summary + p {
      font-family: $sans;
      font-weight: 500; // Changed 03-10

      .plus {
        display: inline-block;
      }

      &:first-child {
        margin-top: 0;
      }
    }

    .kicker {
      line-height: 1.2;
    }

    .publish-date,
    .media-promo,
    .meta,
    .summary + p {
      color: var(--teaser-meta-color);
    }

    .publish-date,
    .media-promo {
      display: inline-block;
      white-space: nowrap;

      + .media-promo {

        .fa {
          padding-left: #{calc(($standard_spacing * 0.125) / $small)}em;
          border-left: solid rgb(from var(--teaser-meta-color) r g b / 50%) #{calc($thin / $small)}em;
          margin-left: #{calc(calc($standard_spacing / 36) / $small)}em;
        }
      }
    }

    .meta {
      line-height: normal;
      padding-left: 1.125em;
      position: relative;
      z-index: $stack_normal;

      &.location {

        .address,
        .building a,
        .campus {
          display: none;
        }
      }

      &.location,
      &.time {
        display: none;
      }

      .fa {
        width: 1em;
        position: absolute;
        top: 0;
        left: 0;
        z-index: $stack_normal;
        line-height: 120%;
      }
    }

    .summary {
      color: var(--teaser-summary-color);
      font-family: $sans;
      font-weight: 500; // Changed 03-10
      line-height: 1.3;

      p {

        &:last-child {
          margin-bottom: 0;
        }

        + button {
          margin-top: calc($standard_spacing / 6);
        }
      }

      .summary-text {
        margin-right: calc($standard_spacing / 3);
      }

      + p {
        font-style: italic;
        margin-top: 0.125em;
      }
    }

    .source {
      font-weight: 700; // Changed 03-10
      line-height: 140%;
      font-style: italic;
    }
  }

  &:where(.has-image, .video) {

    .text {
      padding-left: calc(var(--teaser-text-padding) + (var(--teaser-aside-text-overlap-value) * var(--teaser-aside-text-overlap-active)));
    }
  }

  &:where(:not(.has-image, .video)) {

    .text {
      // Covers situations where teaser_bias() is set to image
      flex-grow: 1 !important;
    }
  }

  &.event {

    .event-meta {
      display: none;
    }
  }

  &.force:after {
    display: none !important;
  }
}

// .page-layout_inner {
//
//   .main-content {
//
//     .primary-column {
//
//       .primary-content {
//
//         .teaser {
//           width: 100%;
//           // margin: ($standard_spacing / 3) 0;
//           // padding: ($standard_spacing / 2) ($standard_spacing * (2 / 3));
//
//           .teaser {
//             padding: 0;
//           }
//         }
//       }
//     }
//   }
//
//   .sidebar {
//
//     .teaser {
//       padding: 0;
//       padding-top: ($standard_spacing / 3);
//       border: none;
//
//       &.has-image {
//         padding-top: 0;
//       }
//
//       .image {
//
//         a,
//         img {
//           display: block;
//         }
//
//         a {
//           border-bottom: none;
//         }
//       }
//
//       .headline {
//         margin: (($standard_spacing / 4) / 1.125) (($standard_spacing / 3) / 1.125); // math for font size
//         font-size: 1.125em;
//
//         @include breakpoint_lap_width() {
//           margin: (($standard_spacing / 4) / 1.25) (($standard_spacing / 3) / 1.25); // math for font size
//           font-size: 1.25em;
//         }
//
//         @include breakpoint_desk_width() {
//           margin: (($standard_spacing / 4) / 1.125) (($standard_spacing / 3) / 1.125); // math for font size
//           font-size: 1.125em;
//         }
//
//         @include breakpoint_jumbotron_width() {
//           margin: (($standard_spacing / 4) / 1.375) (($standard_spacing / 3) / 1.375); // math for font size
//           font-size: 1.375em;
//         }
//       }
//
//       .summary {
//         text-align: left;
//         margin: 0 (($standard_spacing / 3) / 0.8); // font-size math
//         padding-bottom: (($standard_spacing / 3) / 0.8); // font-size math
//       }
//     }
//   }
// }

.no-js,
.no-touchevents {

  .teaser {

    .thumbnail {

      a {

        &:focus,
        &:hover {

          .image {

            &:before {
              @include opacity(0.33);
            }
          }

          img {
            @include transform(scale(1.05, 1.05));
          }
        }
      }
    }

    .text {

      h5 {

        a {

          &:focus,
          &:hover {
            background-color: transparent;
            @include box_shadow(none);
            color: var(--teaser-headline-color-hover);
          }
        }
      }

      .source {

        a {

          &:focus,
          &:hover {
            color: var(--teaser-source-color-hover);
          }
        }
      }
    }
  }
}
